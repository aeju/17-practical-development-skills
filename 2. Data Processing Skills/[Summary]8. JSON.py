"""
* JSON의 한계(= 텍스트 기반 데이터의 단점)<2>
-> 사람이 읽기 편한 만큼, 컴퓨터 입장에서는 비효율적인 규격

1. 불필요한 트래픽 오버헤드
텍스트 기반 -> 실질적인 데이터를 표현하는 데 드는 비용이 큼
vs. 프로토콜 버퍼: 바이너리 기반(= 같은 데이터여도 더 작은 파일 크기)
cf. JSON 입축 -> 비슷, but CPU 자원을 많이 사용

2. 메시지 호환성 유지의 어려움
서버에서 JSON 파일 업데이트 -> 같은 규격 JSON 키, 값 사용하여 통신하는 모든 클라이언트 프로그램도 규격 동일하게 반영해야 함.
=> 규격을 바꿔야 한다면, 새 규격을 사용하는 것이 좋음
=> RESTful API를 사용할 때 버전을 주소에 넣어 해결하는 방법도 o

cf. 인터페이스 코드 : 프로토콜 버퍼처럼 규격을 정의하는 '스키마' 파일을 먼저 만들고, 이 스키마 파일로부터 자동생성되는 코드
cf. YAML : 주석 공식적으로 지원
cf. BSON : 몽고DB에서 사용, 바이너리 지원하는 JSON 규격(다른 환경에서 바이너리 데이터 사용하려면, Base64)

단점 요약
- 주석 사용 불가능
- 서버와 클라이언트 간 연동 데이터 규격이 변경되는 상황을 인지할 수 없음
- 1초 이내의 짧은 시간에 많은 데이터를 주고받아야 하는 환경에서는 비효율적
"""